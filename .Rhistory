plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$gender)
model <- lm(points ~ attitude)
model <- lm(formula = points ~ learning_data)
model <- lm(Points ~ attitude)
model <- lm(learning_data$Points ~ attitude)
model <- lm(learning_data$Points ~ learning_data$attitude)
Points <- transform(Points, Fitted = fitted(model))
Points <- transform(learning_data$Points, Fitted = fitted(model))
Points
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude, y = Points,
xend = x, yend = Fitted))
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude)
Points <- transform(learning_data$Points, Fitted = fitted(model))
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude,learning_data$deep, learning_data$stra )
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
plot(Points)
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
install.packages("ggfortify")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
plot(Points)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(fitted_model)
library(ggfortify)
plot(attitude, fitted_model)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(attitude, fitted_model)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(attitude, fitted_model)
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2
p1
p2
plot(p1)
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p3
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank")
p3
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
lm1 <- lm(learning_data$Points~learning_data$deep)
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank")
p3
p1 <- plot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p2 <- plot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p1 <- plot(lm1, smooth.linetype = "blank")
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- plot(lm1, smooth.linetype = "blank")
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- plot(lm1, smooth.linetype = "blank")
summary(learning_data$Points)
clearPushBack()
clear
summary(learning_data$attitude)
summary(learning_data$deep)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$stra)
summary(learning_data$Points)
summary(learning_data$gender)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1
p1 <- plot(lm1, smooth.linetype = "blank")
learning_data <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
head(learning_data)
#structure and dimensions of the data
str(learning_data)
dim(learning_data)
library(ggplot2)
#Trying to find out the correaltion between different variables.
pairs(learning_data)
# creating a plot and trying to find the dependencies of points and attitude
#There is a linear relationship between these two attributes.
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
plot2 <- ggplot(learning_data, aes(attitude, deep, col = gender))
plot2 <- plot2 + geom_point()
plot2
summary(learning_data$attitude)
summary(learning_data$deep)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$stra)
summary(learning_data$Points)
summary(learning_data$gender)
lm1 <- lm(learning_data$Points~learning_data$attitude)
abline(lm1)
abline(lm1)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1
abline(lm1)
plot(lm1)
modelone <- lm(learning_data$Points~learning_data$attitude)
lm1
modelone <- lm(learning_data$Points~learning_data$attitude)
plot(modelone)
plot(modelone)
library(tidyr); library(dplyr); library(ggplot2)
library(tidyr); library(dplyr); library(ggplot2)
library(tidyr); library(dplyr); library(ggplot2)
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(failures))
alc <- read.csv("D:/Study Material/Introduction to Open Data Science/IODS-project/data/student_alc_consumption.csv")
dim(alc)
colnames(alc)
library(tidyr); library(dplyr); library(ggplot2)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(alc) %>% glimpse
# draw a bar plot of each variable
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
#Studying alocohal consumption and its relationship with other variables such as sex, grades, average past failures, average age of both genders, and absences.
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(failures))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_age = mean(age))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(absences))
library(ggplot2)
plot1 <- ggplot(alc, aes(x = high_use, y = G3, col= sex))
plot1 + geom_boxplot() + ylab("grade") + ggtitle("Student grades by alcohol consumption and sex")
plot2 <- ggplot(alc, aes(x = high_use, y = absences, col= sex))
plot2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
plot3 <- ggplot(alc, aes(x = high_use, y = age, col= sex))
plot3 + geom_boxplot() + ggtitle("Student age by alcohol consumption and sex")
plot4 <- ggplot(alc, aes(x = high_use, y = goout, col= sex))
plot4 + geom_boxplot()
''' The above numerical results and graphs show relationships between high usage of alcohol and different variables such as age, grades, absences and goout.
If we look at the numerical results of grades and alcohol consumption, we can see that the Male students who have high usage of alcohol have less grades on average.
The important and interesting aspect of the finding was the relationship of alcohol high use and failures. I calculated mean of failures and the results show that the Female students with high alcohol use have mean of 0.286 failures and Male students have mean of 0.375. These numbers are alot higher than the mean failures of those students who do not have high usage of alcohol.
Similarly the graphs show that both Male and Female students with high usage of alcohol has low grades.
Students with high usage of alcohol has high absent rate also.
The age factor is surprising. Male students who are touching the age of 18 has higher alcohol usage as compared to Female students. Female students with high usage of alcohol have on average age of 17.
The last graph result shows that the Male students who have higher rate of Goout, also has higher rate of alcohol consumption.
rm <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(rm)
plot3 + geom_boxplot() + ggtitle("Student age by alcohol consumption and sex")
alc <- read.csv("D:/Study Material/Introduction to Open Data Science/IODS-project/data/student_alc_consumption.csv")
rm <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(rm)
# print out the coefficients of the model
coef(rm)
# find the model with glm()
rm2 <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(rm2) %>% exp()
# compute confidence intervals (CI)
CI <- confint(rm2) %>% exp()
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# fit the model
rm3 <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(rm3, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = ifelse (probability > 0.5, TRUE, FALSE))
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% head(10)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col= prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>%addmargins()
# print out the coefficients of the model
coef(rm)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>%addmargins()
library(MASS)
library(tidyverse)
library(corrplot)
# loading the data
data("Boston")
library(MASS)
library(tidyverse)
library(corrplot)
# loading the data
data("Boston")
```{r, include=FALSE}
library(MASS)
library(tidyverse)
library(corrplot)
# loading the data
data("Boston")
library(MASS)
library(tidyverse)
library(corrplot)
# loading the data
data("Boston")
#Structure of the dataset
str(Boston)
#Summary of the dataset
summary(Boston)
# plotting matrix of the variables
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-  cor(Boston)%>% round(2)
# print the correlation matrix
cor_matrix
# visualizing the correlation matrix
corrplot(cor_matrix, method="circle")
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime~., data = train)
# print the result of LDA model
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col= classes, pch=classes)
lda.arrows(lda.fit, myscale = 2)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# Comparing the results of correct classes and predicted classes, in tabular form.
table(correct =correct_classes , predicted = lda.pred$class)
# euclidean distance matrix
dist_eu <- dist(Boston)
# manhattan distance matrix
dist_man <- dist(Boston, method = "manhattan")
# summary of the Euclidean distances
summary(dist_eu)
# summary of the Manhattan distances
summary(dist_man)
# Boston dataset is available
# k-means clustering
km <-kmeans(Boston, centers = 3)
# plot the Boston dataset with clusters
pairs(Boston[6:10], col = km$cluster)
library(ggplot2)
# MASS, ggplot2 and Boston dataset are available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# read the human data
human <-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# look at the (column) names of human
names(human)
# look at the structure of human
str(human)
# print out summaries of the variables
summary(human)
# read the human data
human <-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# look at the (column) names of human
names(human)
# look at the structure of human
str(human)
# print out summaries of the variables
summary(human)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# print out summaries of the variables
summary(human)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the (column) names of human
names(gii)
# look at the structure of human
str(gii)
# print out summaries of the variables
summary(gii)
# look at the (column) names of human
names(human)
# look at the (column) names of human
names(human)
# look at the (column) names of human
names(gii)
human$Human.Development.Index..HDI.
colnames(human) <- c("HDIRank", "Country","HDIIndex", "BirthLifeExp", "ExpEducation_year", "AvgEducation_year", "GNIPerCapita", "GNIPC_without_Rank")
# look at the (column) names of human
names(human)
# look at the (column) names of human
names(gii)
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", " SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
# look at the (column) names of human
names(gii)
FemaletoMaleEdu <- SecEduFemale/SecEduMale
FemaletoMaleEdu <- gii$SecEduFemale/gii$SecEduMale
EduF2M <- gii$SecEduFemale/gii$SecEduMale
LaborF2M <- gii$LaborFemale/gii$LaborMale
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", " SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", "SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
# look at the (column) names of human
names(gii)
# look at the (column) names of human
names(gii)
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", "SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
# look at the structure of human
str(gii)
# look at the (column) names of human
names(gii)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the (column) names of human
names(gii)
# look at the (column) names of human
names(gii)
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", "SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
# look at the (column) names of human
names(gii)
# read the human data
hdi <-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# look at the (column) names of human
names(hdi)
colnames(hdi) <- c("HDIRank", "Country","HDIIndex", "BirthLifeExp", "ExpEducation_year", "AvgEducation_year", "GNIPerCapita", "GNIPC_without_Rank")
# look at the structure of human
str(hdi)
# look at the (column) names of human
names(hdi)
human <- merge(hdi, gii,by="Country")
human
dim(human)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
tea <- tea
dim(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
tea <- tea
tea <- tea
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
tea <- tea
library(FactoMineR)
tea <- tea
dim(tea)
tea <- data(tea)
dim(tea)
tea <- data("tea")
dim(tea)
data("tea")
dim(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
require(ClustOfVar)
install.packages("Clustofvar")
install.packages("ClustOfVar")
require(ClustOfVar)
# run variable clustering excluding the target variable (churn)
variable_tree <- hclustvar(mca.quali = training[,1:18])
# run variable clustering excluding the target variable (churn)
variable_tree <- hclustvar(mca.quali = training[,1:6])
# run variable clustering excluding the target variable (churn)
variable_tree <- hclustvar(mca.quali = training[,1])
# run variable clustering excluding the target variable (churn)
variable_tree <- hclustvar(mca.quali)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
