learning2014$stra <- rowMeans(strategic_columns)
columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014_new <- select(learning2014, one_of(columns))
# see the stucture of the new dataset
str(learning2014_new)
learning
learning2014_new <- filter(learning2014_new, points>0)
learning2014_new <- filter(learning2014_new, Points>0)
dim(learning2014_new)
learning2014 <- read.csv('http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt', sep="\t")
head(learning2014)
str(learning2014)
#Finding the dimensions of the data
dim(learning2014)
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
library(dplyr)
library(dplyr)
# creating a deep column
deep_columns <- select(learning2014, one_of(deep_questions))
learning2014$deep <- rowMeans(deep_columns)
# creating a surf column
surface_columns <- select(learning2014, one_of(surface_questions))
learning2014$surf <- rowMeans(surface_columns)
# creating a stra column
strategic_columns <- select(learning2014, one_of(strategic_questions))
learning2014$stra <- rowMeans(strategic_columns)
columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014_new <- select(learning2014, one_of(columns))
learning2014_new <- filter(learning2014_new, Points>0)
learning2014$attitude <- learning2014$Attitude/10
columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014_new <- select(learning2014, one_of(columns))
learning2014_new <- filter(learning2014_new, Points>0)
learning2014_new
dim(learning2014_new)
str(learning2014_new)
write.csv("C:\Users\Zafar\Documents\GitHub\IODS-project\data\learning2014.csv")
write.csv('C:\Users\Zafar\Documents\GitHub\IODS-project\data\learning2014.csv')
write.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
write.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
write.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
write.csv(Data, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
write.csv(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
write.table(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.txt')
(WD <- getwd())
#Now setting the working directory to IODS folder
setwd('C:\Users\Zafar\Documents\GitHub\IODS-project')
#Now setting the working directory to IODS folder
setwd('C:/Users/Zafar/Documents/GitHub/IODS-project')
#Finding the working directory of my file
(WD <- getwd())
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep="\t")
head(data_read)
str(data_read)
write.csv(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep="\t")
write.csv(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
write.csv(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep="\t")
head(data_read)
str(data_read)
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
str(data_read)
str(data_read.drop(X))
str(data_read.drop(index))
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', row.names=FALSE)
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', rownames=FALSE)
write.csv(learning2014_new, 'C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', row.names=FALSE)
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv')
str(data_read)
#Reading the csv file and making sure that the structure is same as expected with 166 observations and 7 variables
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
str(data_read)
head(data_read)
data_read <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
head(data_read)
str(data_read)
head(learning_data)
learning_data <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
head(learning_data)
str(learning_data)
dime(learning_data)
dim(learning_data)
library(ggplot2)
library(ggplot2)
# initialize plot with data and aesthetic mapping
plot1 <- ggplot(learning_data, aes(x = attitude, y = points, col=gender))
plot1
# define the visualization type (points)
p2 <- plot1 + geom_point()
p2
# initialize plot with data and aesthetic mapping
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1
plot1 <- plot1 + geom_point()
plot1
# initialize plot with data and aesthetic mapping
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
#plot1 <- plot1 + geom_point()
plot1
plot1 <- plot1 + geom_point()
plot1
# creating a plot and trying to find the dependencies of points and attitude
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points))
plot1 <- plot1 + geom_point()
plot1
# creating a plot and trying to find the dependencies of points and attitude
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
pairs(learning_data)
#Trying to find out the correaltion between different variables.
pairs(learning_data)
# creating a plot and trying to find the dependencies of points and attitude
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
plot(deep, points)
hist(deep, points)
hist(deep)
hist(deep)
hist(Points)
hist(Points)
hist(learning_data$Points)
hist(learning_data$Points, learning_data$gender)
qplot(learning_data$gender)
qplot(learning_data$attitude)
qplot(learning_data$attitude, learning_data$Points)
plot2 <- qplot(learning_data$attitude, learning_data$Points)
plot2
plot2 <- qplot(learning_data$attitude, learning_data$Points, xlabel = "Attitude")
plot2
plot2 <- qplot(x = learning_data$attitude, y = learning_data$Points, xlabel = "Attitude")
plot2
plot2 <- qplot(x = learning_data$attitude, y = learning_data$Points, xlab = "Attitude")
plot2
plot2 <- qplot(x = learning_data$attitude, y = learning_data$Points, xlab = "Attitude", ylab = "Points")
plot2
plot2 <- qplot(x = learning_data$attitude, y = learning_data$gender, xlab = "Attitude", ylab = "Points")
plot2
plot2 <- qplot(x = learning_data$attitude, y = learning_data$deep, xlab = "Attitude", ylab = "Points")
plot2
plot2 <- qplot(learning_data$attitude, learning_data$deep, xlab = "Attitude", ylab = "Points")
plot2
summary(learning_data$deep)
summary(learning_data$attitude)
summary(learning_data$deep)
head(learning_data)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot2 <- qplot(learning_data$attitude, learning_data$age, xlab = "Attitude", ylab = "Points")
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- qplot(learning_data$attitude, learning_data$age, xlab = "Attitude", ylab = "Points")
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- qplot(learning_data, aes(x = attitude, y = age, xlab = "Attitude", ylab = "Age")
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- qplot(learning_data, aes(x = attitude, y = age, xlab = "Attitude", ylab = "Age")
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- qplot(learning_data, aes(x = attitude, y = age, xlab = "Attitude", ylab = "Age"))
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = attitude, y = age, xlab = "Attitude", ylab = "Age"))
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = attitude, y = Age, xlab = "Attitude", ylab = "Age"))
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- qplot(learning_data, aes(x = attitude, y = Age, xlab = "Attitude", ylab = "Age"))
plot3
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Points, y = Age, xlab = "Attitude", ylab = "Age"))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Points, y = Age, xlab = "Points", ylab = "Age"))
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Points, y = Age))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$Age)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Points, y = Age, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- qplot(learning_data$attitude, learning_data$deep, xlab = "Attitude", ylab = "Points", col = gender)
plot2
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data$attitude, learning_data$deep, xlab = "Attitude", ylab = "Points", col = gender)
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, Points), xlab = "Attitude", ylab = "Points", col = gender)
plot2
summary(learning_data$attitude)
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, Points), xlab = "Attitude", ylab = "Points", col = gender)
plot2 <- plots + geom_abline()
plot2 <- plot2 + geom_abline()
plot2
plot2 <- plot2 + geom_point()
plot2
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, Points), xlab = "Attitude", ylab = "Points", col = gender)
plot2 <- plot2 + geom_point()
plot2
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, Points, xlab = "Attitude", ylab = "Points", col = gender))
plot2 <- plot2 + geom_point()
plot2
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, gender, col = gender))
plot2 <- plot2 + geom_point()
plot2
#Shows the relationship between attitude and deep learning parameters. The results can also been seen from the summary of both variables.
plot2 <- ggplot(learning_data, aes(attitude, deep, col = gender))
plot2 <- plot2 + geom_point()
plot2
# creating a plot and trying to find the dependencies of points and attitude
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
# creating a plot and trying to find the dependencies of points and attitude
#There is a linear relationship between these two attributes.
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
plot2 <- ggplot(learning_data, aes(attitude, deep, col = gender))
plot2 <- plot2 + geom_point()
plot2
summary(learning_data$attitude)
summary(learning_data$deep)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Points, y = Age, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = Points, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = deep, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = surf, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = gender, col = gender))
plot3 <- plot3 + geom_point()
plot3
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$gender)
model <- lm(points ~ attitude)
model <- lm(formula = points ~ learning_data)
model <- lm(Points ~ attitude)
model <- lm(learning_data$Points ~ attitude)
model <- lm(learning_data$Points ~ learning_data$attitude)
Points <- transform(Points, Fitted = fitted(model))
Points <- transform(learning_data$Points, Fitted = fitted(model))
Points
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude, y = Points,
xend = x, yend = Fitted))
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude)
Points <- transform(learning_data$Points, Fitted = fitted(model))
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude,learning_data$deep, learning_data$stra )
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
colnames(Points)[1] <- "Points"
ggplot(Points, aes(attitude, Points)) +
geom_point(col = "red") +
geom_smooth(method = "lm", se = F) +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
geom_segment(aes(x = attitude , y = Points,
xend = attitude, yend = Fitted))
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
plot(Points)
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
install.packages("ggfortify")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
#{r, fig.align = "center", fig.width = 14, fig.height = 8}
library(ggfortify)
lm_fit <- lm(attitude~Points, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
Points <- transform(learning_data$Points, Fitted = fitted(model))
plot(Points)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(fitted_model)
library(ggfortify)
plot(attitude, fitted_model)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(attitude, fitted_model)
model <- lm(learning_data$Points ~ learning_data$attitude + learning_data$deep + learning_data$stra )
fitted_model <- transform(learning_data$Points, Fitted = fitted(model))
plot(attitude, fitted_model)
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2
p1
p2
plot(p1)
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank") + ggtitle("Reasonable")
p3
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank")
p3
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
lm1 <- lm(learning_data$Points~learning_data$deep)
p1 <- autoplot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p3 <- autoplot(lm1, which = 3, size = 3, smooth.linetype = "blank")
p3
p1 <- plot(lm1, which = 1, size = 3, smooth.linetype = "blank")
p1
p2 <- autoplot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p2
p2 <- plot(lm1, which = 2, size = 3, smooth.linetype = "blank")
p1 <- plot(lm1, smooth.linetype = "blank")
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- plot(lm1, smooth.linetype = "blank")
lm1 <- lm(learning_data$Points~learning_data$attitude)
p1 <- plot(lm1, smooth.linetype = "blank")
summary(learning_data$Points)
clearPushBack()
clear
summary(learning_data$attitude)
summary(learning_data$deep)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$stra)
summary(learning_data$Points)
summary(learning_data$gender)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1
p1 <- plot(lm1, smooth.linetype = "blank")
learning_data <- read.csv('C:/Users/Zafar/Documents/GitHub/IODS-project/data/learning2014.csv', sep=",")
head(learning_data)
#structure and dimensions of the data
str(learning_data)
dim(learning_data)
library(ggplot2)
#Trying to find out the correaltion between different variables.
pairs(learning_data)
# creating a plot and trying to find the dependencies of points and attitude
#There is a linear relationship between these two attributes.
plot1 <- ggplot(learning_data, aes(x = attitude, y = Points, col=gender))
plot1 <- plot1 + geom_point()
plot1
plot2 <- ggplot(learning_data, aes(attitude, deep, col = gender))
plot2 <- plot2 + geom_point()
plot2
summary(learning_data$attitude)
summary(learning_data$deep)
#Shows the relationship between attitude and age parameters. The results can also been seen from the summary of both variables.
plot3 <- ggplot(learning_data, aes(x = Age, y = stra, col = gender))
plot3 <- plot3 + geom_point()
plot3
summary(learning_data$Points)
summary(learning_data$stra)
summary(learning_data$Points)
summary(learning_data$gender)
lm1 <- lm(learning_data$Points~learning_data$attitude)
abline(lm1)
abline(lm1)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1 <- lm(learning_data$Points~learning_data$attitude)
lm1
abline(lm1)
plot(lm1)
modelone <- lm(learning_data$Points~learning_data$attitude)
lm1
modelone <- lm(learning_data$Points~learning_data$attitude)
plot(modelone)
plot(modelone)
library(tidyr); library(dplyr); library(ggplot2)
library(tidyr); library(dplyr); library(ggplot2)
library(tidyr); library(dplyr); library(ggplot2)
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(failures))
alc <- read.csv("D:/Study Material/Introduction to Open Data Science/IODS-project/data/student_alc_consumption.csv")
dim(alc)
colnames(alc)
library(tidyr); library(dplyr); library(ggplot2)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(alc) %>% glimpse
# draw a bar plot of each variable
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
#Studying alocohal consumption and its relationship with other variables such as sex, grades, average past failures, average age of both genders, and absences.
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(failures))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_age = mean(age))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), average_failures = mean(absences))
library(ggplot2)
plot1 <- ggplot(alc, aes(x = high_use, y = G3, col= sex))
plot1 + geom_boxplot() + ylab("grade") + ggtitle("Student grades by alcohol consumption and sex")
plot2 <- ggplot(alc, aes(x = high_use, y = absences, col= sex))
plot2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
plot3 <- ggplot(alc, aes(x = high_use, y = age, col= sex))
plot3 + geom_boxplot() + ggtitle("Student age by alcohol consumption and sex")
plot4 <- ggplot(alc, aes(x = high_use, y = goout, col= sex))
plot4 + geom_boxplot()
''' The above numerical results and graphs show relationships between high usage of alcohol and different variables such as age, grades, absences and goout.
If we look at the numerical results of grades and alcohol consumption, we can see that the Male students who have high usage of alcohol have less grades on average.
The important and interesting aspect of the finding was the relationship of alcohol high use and failures. I calculated mean of failures and the results show that the Female students with high alcohol use have mean of 0.286 failures and Male students have mean of 0.375. These numbers are alot higher than the mean failures of those students who do not have high usage of alcohol.
Similarly the graphs show that both Male and Female students with high usage of alcohol has low grades.
Students with high usage of alcohol has high absent rate also.
The age factor is surprising. Male students who are touching the age of 18 has higher alcohol usage as compared to Female students. Female students with high usage of alcohol have on average age of 17.
The last graph result shows that the Male students who have higher rate of Goout, also has higher rate of alcohol consumption.
rm <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(rm)
plot3 + geom_boxplot() + ggtitle("Student age by alcohol consumption and sex")
alc <- read.csv("D:/Study Material/Introduction to Open Data Science/IODS-project/data/student_alc_consumption.csv")
rm <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(rm)
# print out the coefficients of the model
coef(rm)
# find the model with glm()
rm2 <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(rm2) %>% exp()
# compute confidence intervals (CI)
CI <- confint(rm2) %>% exp()
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# fit the model
rm3 <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(rm3, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = ifelse (probability > 0.5, TRUE, FALSE))
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% head(10)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col= prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>%addmargins()
# print out the coefficients of the model
coef(rm)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>%addmargins()
