mod3 <- lm(learning_data$Points ~ learning_data$deep)
autoplot(mod3, which = 5, size = 3, smooth.linetype = "blank") + ggtitle("Residuals vs Fitted Values")
lm_fit <- lm(Points~attitude, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
autoplot(mod1, which = 1, size = 3, smooth.linetype = "blank") + ggtitle("Residuals vs Fitted Values")
mod2 <- lm(learning_data$Points ~ learning_data$deep)
autoplot(mod2, which = 2, size = 3, smooth.linetype = "blank") + ggtitle("Normal Q-Q Plot")
mod3 <- lm(learning_data$Points ~ learning_data$deep)
autoplot(mod3, which = 5, size = 3, smooth.linetype = "blank") + ggtitle("Residuals vs Leverage")
lm_fit <- lm(Points~attitude, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
lm_fit <- lm(learning_data$Points~learning_data$attitude, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
mod3 <- lm(learning_data$Points ~ learning_data$attitude)
autoplot(mod3, which = 5, size = 3, smooth.linetype = "blank") + ggtitle("Residuals vs Leverage")
lm_fit <- lm(learning_data$Points~learning_data$attitude, data = learning_data)
autoplot(lm_fit, which = c(1,2,5), smooth.linetype = "blank")
# read the human data
hdi <-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# look at the (column) names of human
names(hdi)
# look at the (column) names of human
names(hdi)
colnames(hdi) <- c("HDIRank", "Country","HDIIndex", "BirthLifeExp", "ExpEducation_year", "AvgEducation_year", "GNIPerCapita", "GNIPC_without_Rank")
# look at the structure of human
str(hdi)
# print out summaries of the variables
summary(hdi)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the (column) names of human
names(gii)
colnames(gii) <- c("GIIRank", "Country", "GiiIndex", "MotherLifeExp", "TeenageBirthRate", "ReprinParliament", "SecEduFemale", "SecEduMale", "LaborFemale", "LaborMale")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
# look at the structure of human
str(gii)
# print out summaries of the variables
summary(gii)
human <- merge(hdi, gii,by="Country")
dim(human)
names(human)
colnames(hdi) <- c("HDIRank", "Country","HDI", "LifeExp", "ExpEducation", "AvgEducation", "GNI", "GNI_Minus_Rank")
colnames(gii) <- c("GIIRank", "Country", "GII", "MotherLife", "AdoBirth", "parliamentF", "EduF", "EduM", "LaborF", "LaborM")
gii$EduF2M <- gii$SecEduFemale/gii$SecEduMale
gii$LaborF2M <- gii$LaborFemale/gii$LaborMale
gii$EduF2M <- gii$EduF/gii$EduM
gii$LaborF2M <- gii$LaborF/gii$LaborM
# look at the structure of human
str(gii)
# print out summaries of the variables
summary(gii)
human <- merge(hdi, gii,by="Country")
dim(human)
names(human)
# read the human data
hdi <-read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
# look at the (column) names of human
names(hdi)
colnames(hdi) <- c("HDIRank", "Country","HDI", "LifeExp", "ExpEducation", "AvgEducation", "GNI", "GNI_Minus_Rank")
# look at the structure of human
str(hdi)
# print out summaries of the variables
summary(hdi)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the (column) names of human
names(gii)
colnames(gii) <- c("GIIRank", "Country", "GII", "MotherLife", "AdoBirth", "parliamentF", "EduF", "EduM", "LaborF", "LaborM")
gii$EduF2M <- gii$EduF/gii$EduM
gii$LaborF2M <- gii$LaborF/gii$LaborM
# look at the structure of human
str(gii)
# print out summaries of the variables
summary(gii)
human <- merge(hdi, gii,by="Country")
dim(human)
names(human)
summary(human)
library(stringr)
str(human$GNI)
library(stringr)
str(human$GNI)
str_replace(human$GNI, pattern = ",", replace = "")
str(human$GNI)
str_replace(human$GNI, pattern = ",", replace = " ")
str(human$GNI)
str_replace(human$GNI, pattern = ",", replace = "") %>% as.numeric()
str(human$GNI)
str_replace(human$GNI, pattern = ",", replace = "") %>% as.numeric()
str(human$GNI)
human$GNI <- str_replace(human$GNI, pattern = ",", replace = "") %>% as.numeric()
str(human$GNI)
str(human$GNI)
names(human)
keep <- c("Country","EduF2M", "LaborF2M", "LifeExp", "ExpEducation", "GNI", "MotherLife", "AdoBirth", "parliamentF" )
keep
human
human <- select(human, one_of(keep))
library(dplyr)
str(human$GNI)
human$GNI <- str_replace(human$GNI, pattern = ",", replace = "") %>% as.numeric()
keep <- c("Country","EduF2M", "LaborF2M", "LifeExp", "ExpEducation", "GNI", "MotherLife", "AdoBirth", "parliamentF" )
human <- select(human, one_of(keep))
names(human)
complete.cases(human)
data.frame(human[-1])
data.frame(human[-1], comp = complete.cases(human))
complete.cases(human)
?complete.cases
human <- filter(human, complete.cases(human))
human
dim(human)
?tail
tail(human)
tail(human, 10)
tail(human, 3)
tail(human, 10)
last <- nrow(human)-7
last
human_ <- human[1:last, ]
rownames(human_) <- human$Country
human_
human(last)
human[last]
human[last,]
human[last+1,]
human[last+5,]
human[last+7,]
human[last+8,]
library(GGally)
install.packages("GGally")
library(GGally)
human_
names(human_)
names(human)
ggpairs(human_)
library(GGally)
library(stringr)
library(dplyr)
str(human$GNI)
human$GNI <- str_replace(human$GNI, pattern = ",", replace = "") %>% as.numeric()
keep <- c("Country","EduF2M", "LaborF2M", "LifeExp", "ExpEducation", "GNI", "MotherLife", "AdoBirth", "parliamentF" )
human <- select(human, one_of(keep))
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human))
tail(human, 10)
last <- nrow(human)-7
human_ <- human[1:last, ]
rownames(human_) <- human$Country
human_ <- select(human, -Country)
ggpairs(human_)
cor(human_) %>% corrplot()
cor(human_) %>% corrplot()
last <- nrow(human)-7
human_ <- human[1:last, ]
rownames(human_) <- human$Country
human_ <- select(human, -Country)
ggpairs(human_)
cor(human_) %>% corrplot()
cor(human_) %>% corrplot()
library(corrplot)
cor(human_) %>% corrplot()
dim(human_)
human <- human[1:last, ]
rownames(human) <- human$Country
human_ <- select(human, -Country)
ggpairs(human_)
cor(human_) %>% corrplot()
dim(human_)
write.csv(human_, "human_.csv")
read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv")
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv")
dim(data)
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE)
dim(data)
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, -1)
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE)
dim(data)
write.csv(human_, "human_.csv", row.names=F)
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE)
dim(data)
data
human_ <- human[1:last, ]
rownames(human_) <- human$Country
human_ <- select(human, -Country)
ggpairs(human_)
cor(human_) %>% corrplot()
dim(human_)
write.csv(human_, "human_.csv")
write.csv(human_, "human_.csv")
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE)
dim(data)
data
dim(data)
data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(data)
data
header(data)
head(data)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
dim(human_)
write.csv(human_, "human_.csv")
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
human_std <- scale(human_data)
summary(human_std)
human_pcs <- prcomp(human_std)
human_pcs
human_pca <- prcomp(human_std)
biplot(human_pca)
biplot(human_pca, cex=c(0.8,1))
biplot(human_pca, cex=c(0.8,1), choices = 1:2)
biplot(human_pca, cex=c(0.8,1), choices = 1:3)
biplot(human_pca, cex=c(0.8,1), choices = 0:1)
biplot(human_pca, cex=c(0.8,1), choices = 0:2)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("black40", "deeppink"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink5"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink3"))
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
summary(human_std)
human_pca <- prcomp(human_std)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
summary(human)
human_pca <- prcomp(human)
human_pca <- prcomp(human, -Country)
human_pca <- prcomp(human_data)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
window()
windows()
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
head(human_data)
human_std <- scale(human_data)
head(human_std)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
summary(human)
human_pca <- prcomp(human_data)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
human_std <- scale(human_data)
summary(human_std)
human_pca <- prcomp(human_std)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
biplot(human_pca, choices = 1:2, cex=c(0.8,1), col=c("grey40", "deeppink2"))
MCA(x=human_pca, graph=FALSE, method='indicator')
?MCA
install.packages(c("FactoMineR", "factoextra"))
library("FactoMineR")
MCA(x=human_pca, graph=FALSE, method='indicator')
MCA(human_pca, graph=FALSE, method='indicator')
MCA(human_pca, graph=FALSE, method='indicator')
MCA(human_data, graph=FALSE, method='indicator')
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
MCA(human_data, graph=FALSE, method='indicator')
MCA(human_data, graph=TRUE, method='indicator')
human_pca <- prcomp(human_data)
MCA(human_pca, graph=TRUE, method='indicator')
summary(human_pca)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
dim(human_data)
head(human_data)
summary(human)
human_pca <- prcomp(human_data)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
human_std <- scale(human_data)
summary(human_std)
human_pca <- prcomp(human_std)
biplot(human_pca, choices = 1:2, cex=c(0.8,1), col=c("grey40", "deeppink2"))
summary(human_pca)
s <- summary(human_pca)
s
pca_pr <- round(100*s$importance[2, ], digits = 1)
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
pc_lab
# draw a biplot
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
# draw a biplot
biplot(human_pca, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
# draw a biplot
biplot(human_pca,choices=1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
screeplot(human_pcs, npcs = 2, type = "lines")
screeplot(human_pcs, npcs = 6, type = "lines")
screeplot(human_pcs, npcs = 8, type = "lines")
screeplot(human_pcs, npcs = 9, type = "lines")
screeplot(human_pcs, npcs = 20, type = "lines")
screeplot(human_pcs, npcs = 8, type = "lines")
screeplot(human_pcs, npcs = 8)
screeplot(human_pcs)
screeplot(human_pcs, npcs = 8, type = "lines")
?screeplot
screeplot(human_pcs, npcs = 8, type = "barplot")
screeplot(human_pcs, npcs = 8, type = "lines")
screeplot(human_pcs, npcs = 8, type = "lines", title="Optimal number of PCs")
screeplot(human_pcs, npcs = 8,  title="Optimal number of PCs",type = "lines")
screeplot(human_pcs, npcs = 8,  title="Optimal number of PCs",type = "lines")
screeplot(human_pcs, npcs = 8, lab=TRUE, title="Optimal number of PCs",type = "lines")
screeplot(human_pcs, npcs = 8, lab=TRUE, title="Optimal number of PCs")
screeplot(human_pcs, npcs = 8, lab = TRUE, title="Optimal number of PCs")
screeplot(human_pcs, npcs = 8, type = "lines")
# draw a biplot
biplot(human_pca,choices=1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
screeplot(human_pcs, npcs = 8, type = "lines")
screeplot(human_pcs, npcs = 8, type = "lines", title = "Scree plot of metric MDS")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Scree plot of metric MDS")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs", xlab="Principle Components")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs", lab="Principle Components")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs", lab=TRUE)
screeplot(human_pcs, lab=TRUE, npcs = 8, type = "lines", main = "Optimal number of PCs")
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs")
human_pca <- prcomp(human_data)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
human_std <- scale(human_data)
summary(human_std)
human_pca <- prcomp(human_std)
biplot(human_pca, choices = 1:2, cex=c(0.8,1), col=c("grey40", "deeppink2"))
s <- summary(human_pca)
pca_pr <- round(100*s$importance[2, ], digits = 1)
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
pc_lab
# draw a biplot
biplot(human_pca,choices=1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
knitr::opts_chunk$set(echo = TRUE)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
```{r, echo=FALSE}
library("FactoMineR")
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
screeplot(human_pcs, npcs = 8, type = "lines", main = "Optimal number of PCs")
tea_data <- load(tea)
tea_data <- read.csv(tea)
tea_data <- data("tea")
tea_data
tea_data <- data(tea)
tea_data
library(FactoMineR)
tea_data <- data(tea)
tea_data
dim(tea_data)
data(tea)
dim(tea)
tea_data <- data(tea)
dim(tea_data)
tea_data <- data.frame(data(tea))
dim(tea_data)
tea_data <- data(tea)
dim(tea_data)
dim(data(tea))
dim(data(tea))
data(tea)
dim(data(tea))
data(tea)
dim(tea)
tea <- data(tea)
dim(tea)
res.mca = MCA(tea, quanti.sup=19, quali.sup=c(20:36))
data(tea)
res.mca = MCA(tea, quanti.sup=19, quali.sup=c(20:36))
res = dimdesc(res.mca, axes=1:2, proba=0.05)
res
tea <- tea
dim(tea)
library(FactoMineR)
tea <- tea
dim(tea)
library(FactoMineR)
tea <- tea
dim(tea)
library(FactoMineR)
tea <- tea
dim(tea)
str(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
dim(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
library(FactoMineR)
library(ggplot2)
library(dplyr)
library(tidyr)
tea <- tea
dim(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# visualize MCA
plot(mca, visible=c("ind"), habillage = "quali")
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
dim(tea)
library(FactoMineR)
tea <- tea
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
tea_time <- select(tea, one_of(keep_columns))
pca_pr <- round(100*s$importance[2, ], digits = 1)
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
# draw a biplot
biplot(human_pca,choices=1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
library(FactoMineR)
tea <- tea
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
tea_time <- select(tea, one_of(keep_columns))
tea_time <- select(tea, one_of(keep_columns))
```{r}
# look at the summaries and structure of the data
dim(tea_time)
library(FactoMineR)
tea <- tea
tea
?pandoc
install.packages("pandoc")
library(ggplot2)
library(dplyr)
library(tidyr)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
human_data <- read.csv("C:/Users/Zafar/Documents/GitHub/IODS-project/data/human_.csv", sep = ",", header = TRUE, row.names = 1)
```{r}
dim(human_data)
head(human_data)
summary(human_data)
dim(human_data)
head(human_data)
summary(human_data)
The results show that we have 155 rows and 8 columns now. We have mapped the data with countries as rows for better understanding.
The data consists of 8 features which are representing Women empowerment in different countries regarding education, work, Expected life and average life with representation in the parliament.
Then performed Prinicple Component Analysis (PCA) without normalizing the data. It is difficult to understand the resutls in graphical format as the features are making no sense.
```{r, echo=FALSE}
human_pca <- prcomp(human_data)
biplot(human_pca, cex=c(0.8,1), choices = 1:2, col=c("grey40", "deeppink2"))
biplot(human_pca, cex=c(0.5,1), choices = 1:2, col=c("grey40", "deeppink2"))
biplot(human_pca, cex=c(0.5,1), choices = 1:2, col=c("grey40", "deeppink2"))
For a better understanding, we have to standardize the data.
```{r}
human_std <- scale(human_data)
human_pca <- prcomp(human_std)
biplot(human_pca, choices = 1:2, cex=c(0.8,1), col=c("grey40", "deeppink2"))
s <- summary(human_pca)
s
pca_pr <- round(100*s$importance[2, ], digits = 1)
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
# draw a biplot
biplot(human_pca,choices=1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
library(FactoMineR)
data("tea")
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
tea_time <- select(tea, one_of(keep_columns))
library(dplyr)
library(FactoMineR)
data("tea")
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
dim(tea_time)
names(tea_time)
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
library(dplyr)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
library(tidyr)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
library(ggplot2)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value), geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
install.pandoc()
install.packages("installr")
install.pandoc()
installr::install.pandoc()
